# Code Quality and Testing Template
# This template runs code quality checks, security scans, type checking, and unit tests
# for Python applications in the Integration Hub project

parameters:
  - name: appName
    type: string
    displayName: 'Application Name/Directory (e.g., hl7_server, hl7_transformer)'
  - name: appDisplayName
    type: string
    displayName: 'Application Display Name (e.g., HL7 Server, HL7 Transformer)'
  - name: pythonVersion
    type: string
    default: '3.13'
    displayName: 'Python Version'
  - name: poolName
    type: string
    default: 'Azure Pipelines'
    displayName: 'Agent Pool Name'
  - name: banditSourceDir
    type: string
    displayName: 'Bandit source directory (defaults to last part of appName if not specified)'
    default: ''

jobs:
  - job: CodeQuality_${{ replace(parameters.appName, '/', '_') }}
    displayName: 'Code Quality & Tests - ${{ parameters.appDisplayName }}'
    pool:
      ${{ if eq(parameters.poolName, 'Azure Pipelines') }}:
        vmImage: 'ubuntu-latest'
      ${{ else }}:
        name: ${{ parameters.poolName }}
    
    steps:
      - checkout: self
        displayName: 'Checkout Repository'
        fetchDepth: 1

      - task: UsePythonVersion@0
        displayName: 'Use Python ${{ parameters.pythonVersion }}'
        inputs:
          versionSpec: '${{ parameters.pythonVersion }}'

      - script: |
          set -euo pipefail  # Bash strict mode
          echo "##[group]Install UV and code quality tools"

          python -m pip install --upgrade pip
          python -m pip install uv
          
          echo "Installing global code quality tools with UV..."
          uv tool install ruff
          uv tool install bandit
          uv tool install mypy
          uv tool install pip-audit
          uv tool install uv-secure
          
          # Verify UV installation
          uv --version
          echo "‚úÖ UV and global code quality tools installed"
          echo "##[endgroup]"
        displayName: 'Install UV and Code Quality Tools'

      - script: |
          set -euo pipefail
          echo "##[group]Install Shared Dependencies"

          echo "Installing shared libraries with UV..."

          # Install all required shared libraries
          uv pip install --system -e shared_libs/message_bus_lib/
          uv pip install --system -e shared_libs/health_check_lib/
          uv pip install --system -e shared_libs/processor_manager_lib/
          uv pip install --system -e shared_libs/event_logger_lib/
          uv pip install --system -e shared_libs/field_utils_lib/
          uv pip install --system -e shared_libs/transformer_base_lib/
          uv pip install --system -e shared_libs/hl7_validation/

          # Verify shared library installations
          python -c "import message_bus_lib; print('‚úÖ message_bus_lib imported successfully')"
          python -c "import health_check_lib; print('‚úÖ health_check_lib imported successfully')"
          python -c "import processor_manager_lib; print('‚úÖ processor_manager_lib imported successfully')"
          python -c "import event_logger_lib; print('‚úÖ event_logger_lib imported successfully')"
          python -c "import field_utils_lib; print('‚úÖ field_utils_lib imported successfully')"
          python -c "import transformer_base_lib; print('‚úÖ transformer_base_lib imported successfully')"
          python -c "import hl7_validation; print('‚úÖ hl7_validation imported successfully')"

          echo "##[endgroup]"
        displayName: 'Install Shared Dependencies'

      - script: |
          set -euo pipefail
          echo "##[group]Install ${{ parameters.appDisplayName }} Dependencies"
          cd ${{ parameters.appName }}
          
          echo "üì¶ Installing ${{ parameters.appDisplayName }} dependencies with UV..."
          uv pip install --system .
          
          # Install dev dependencies if available
          echo "üì¶ Installing development dependencies..."
          uv pip install --system --group dev . || echo "No dev dependencies found"
          
          echo "‚úÖ Dependencies installed successfully"
          echo "##[endgroup]"
        displayName: 'Install ${{ parameters.appDisplayName }} Dependencies'

      - script: |
          set -euo pipefail
          echo "##[group]Dependency Security Scan - ${{ parameters.appDisplayName }}"
          cd ${{ parameters.appName }}
          
          echo "üîê Running pip-audit for dependency vulnerability scanning..."
          uv tool run pip-audit --desc
          
          echo "‚úÖ Dependency scan completed"
          echo "##[endgroup]"
        displayName: 'Dependency Security Scan - ${{ parameters.appDisplayName }}'
        continueOnError: true

      - script: |
          set -euo pipefail  # Bash strict mode back to normal
          echo "##[group]Code Quality Validation - ${{ parameters.appDisplayName }}"
          cd ${{ parameters.appName }}

          # Track overall validation status
          VALIDATION_FAILED=0
          
          # Derive bandit source directory
          if [ "${{ parameters.banditSourceDir }}" = "" ]; then
            BANDIT_SOURCE=$(basename "${{ parameters.appName }}")
          else
            BANDIT_SOURCE="${{ parameters.banditSourceDir }}"
          fi
          
          echo "üîç Running Ruff check..."
          if ! uv tool run ruff check --output-format=github .; then
            echo "##[error]Ruff code style checks failed!"
            VALIDATION_FAILED=1
          fi
          echo ""
          echo "----------------------------------------"
          echo ""
          
          echo "üîí Running Bandit security scan..."
          if ! uv tool run bandit -r ${BANDIT_SOURCE} tests --severity-level medium; then
            echo "##[error]Bandit security scan found issues!"
            VALIDATION_FAILED=1
          fi
          echo ""
          echo "----------------------------------------"
          echo ""
          
          echo "üõ°Ô∏è Running UV-Secure dependency security scan..."
          if ! uv tool run uv-secure; then
            echo "##[error]UV-Secure found dependency security issues!"
            VALIDATION_FAILED=1
          fi
          echo ""
          echo "----------------------------------------"
          echo ""
          
          echo "üè∑Ô∏è Running MyPy type check..."
          if [ -d "tests" ]; then
            if ! uv tool run mypy ${BANDIT_SOURCE} tests --ignore-missing-imports; then
              echo "##[error]MyPy type checking failed!"
              VALIDATION_FAILED=1
            fi
          else
            if ! uv tool run mypy ${BANDIT_SOURCE} --ignore-missing-imports; then
              echo "##[error]MyPy type checking failed!"
              VALIDATION_FAILED=1
            fi
          fi
          echo ""
          echo "----------------------------------------"
          echo ""

          # Exit with failure if any validation step failed
          if [ $VALIDATION_FAILED -eq 1 ]; then
            echo "##[error]Code quality validation failed! Please fix the issues above."
            exit 1
          fi

          echo "‚úÖ All code quality checks passed"
          echo "##[endgroup]"
        displayName: 'Code Quality Validation - ${{ parameters.appDisplayName }}'
          
      - script: |
          set -euo pipefail
          echo "##[group]Unit Tests - ${{ parameters.appDisplayName }}"
          cd ${{ parameters.appName }}
          
          echo "üß™ Running unit tests..."
          if ! python -m unittest discover tests -v; then
            echo "##[error]Unit tests failed!"
            exit 1
          fi
          
          echo "‚úÖ All unit tests passed"
          echo "##[endgroup]"
        displayName: 'Unit Tests - ${{ parameters.appDisplayName }}'
