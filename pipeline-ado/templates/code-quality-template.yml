# Code Quality and Testing Template
# This template runs code quality checks, security scans, type checking, and unit tests
# for Python applications in the Integration Hub project

parameters:
  - name: appName
    type: string
    displayName: 'Application Name/Directory (e.g., hl7_server, hl7_transformer)'
  - name: appDisplayName
    type: string
    displayName: 'Application Display Name (e.g., HL7 Server, HL7 Transformer)'
  - name: pythonVersion
    type: string
    default: '3.13'
    displayName: 'Python Version'
  - name: poolName
    type: string
    default: 'Azure Pipelines'
    displayName: 'Agent Pool Name'
  - name: banditSourceDir
    type: string
    displayName: 'Bandit source directory (defaults to last part of appName if not specified)'
    default: ''

jobs:
  - job: CodeQuality_${{ replace(parameters.appName, '/', '_') }}
    displayName: 'Code Quality & Tests - ${{ parameters.appDisplayName }}'
    pool:
      ${{ if eq(parameters.poolName, 'Azure Pipelines') }}:
        vmImage: 'ubuntu-latest'
      ${{ else }}:
        name: ${{ parameters.poolName }}
    
    steps:
      - checkout: self
        displayName: 'Checkout Repository'
        fetchDepth: 1

      - task: UsePythonVersion@0
        displayName: 'Use Python ${{ parameters.pythonVersion }}'
        inputs:
          versionSpec: '${{ parameters.pythonVersion }}'

      - script: |
          set -euo pipefail  # Bash strict mode
          echo "##[group]Install UV and code quality tools"
          
          # Install UV - the fast Python package installer and resolver
          python -m pip install --upgrade pip
          python -m pip install uv
          
          # Install code quality tools using UV
          # These will be available globally for all projects
          echo "Installing global code quality tools with UV..."
          uv tool install ruff
          uv tool install bandit
          uv tool install mypy
          uv tool install pip-audit
          
          # Verify UV installation
          uv --version
          echo "‚úÖ UV and global code quality tools installed"
          echo "##[endgroup]"
        displayName: 'Install UV and Code Quality Tools'

      - script: |
          set -euo pipefail
          echo "##[group]Install Shared Dependencies"
          
          # Install shared library using UV with system flag (CI/CD environment)
          echo "Installing shared library with UV..."
          uv pip install --system -e shared_libs/message_bus_lib/
          
          # Verify shared library installation
          python -c "import message_bus_lib; print('‚úÖ message_bus_lib imported successfully')"
          
          echo "##[endgroup]"
        displayName: 'Install Shared Dependencies'

      - script: |
          set -euo pipefail
          echo "##[group]Install ${{ parameters.appDisplayName }} Dependencies"
          cd ${{ parameters.appName }}
          
          # Prefer pyproject.toml over requirements.txt for UV
          if [ -f "pyproject.toml" ]; then
            echo "üì¶ Installing ${{ parameters.appDisplayName }} dependencies from pyproject.toml with UV..."
            uv pip install --system .
            
            # Install dev dependencies if available
            echo "üì¶ Installing development dependencies..."
            uv pip install --system --group dev . || echo "No dev dependencies found in pyproject.toml"
          elif [ -f "requirements.txt" ]; then
            echo "üì¶ Installing ${{ parameters.appDisplayName }} dependencies from requirements.txt with UV..."
            uv pip install --system -r requirements.txt
          else
            echo "‚ö†Ô∏è No pyproject.toml or requirements.txt found"
            exit 1
          fi
          
          echo "‚úÖ Dependencies installed successfully"
          echo "##[endgroup]"
        displayName: 'Install ${{ parameters.appDisplayName }} Dependencies'

      - script: |
          set -euo pipefail
          echo "##[group]Dependency Security Scan - ${{ parameters.appDisplayName }}"
          cd ${{ parameters.appName }}
          
          echo "üîê Running pip-audit for dependency vulnerability scanning..."
          uv tool run pip-audit --desc
          
          echo "‚úÖ Dependency scan completed"
          echo "##[endgroup]"
        displayName: 'Dependency Security Scan - ${{ parameters.appDisplayName }}'
        continueOnError: true

      - script: |
          set -euo pipefail  # Bash strict mode back to normal
          echo "##[group]Validate ${{ parameters.appDisplayName }}"
          cd ${{ parameters.appName }}
          
          # Derive bandit source directory
          if [ "${{ parameters.banditSourceDir }}" = "" ]; then
            BANDIT_SOURCE=$(basename "${{ parameters.appName }}")
          else
            BANDIT_SOURCE="${{ parameters.banditSourceDir }}"
          fi
          
          echo "üîç Running Ruff check..."
          uv tool run ruff check --output-format=github .
          echo ""
          echo "----------------------------------------"
          echo ""
          
          echo "üîí Running Bandit security scan..."
          uv tool run bandit -r ${BANDIT_SOURCE} tests --severity-level medium
          echo ""
          echo "----------------------------------------"
          echo ""
          
          echo "üè∑Ô∏è Running MyPy type check..."
          uv tool run mypy ${BANDIT_SOURCE} tests --ignore-missing-imports
          echo ""
          echo "----------------------------------------"
          echo ""
          
          echo "üß™ Running unit tests..."
          python -m unittest discover tests -v
          
          echo "‚úÖ ${{ parameters.appDisplayName }} validation completed"
          echo "##[endgroup]"
        displayName: 'Validate ${{ parameters.appDisplayName }}'
        continueOnError: true
