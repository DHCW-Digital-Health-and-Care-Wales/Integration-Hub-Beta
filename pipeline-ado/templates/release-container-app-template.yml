parameters:
  azureServiceConnection: '' # Azure Service Connection name
  appName: ''
  resourceGroupName: ''
  azureLocation: ''
  environment: ''
  acrName: ''
  acrRepository: ''
  jobName: ''
  displayName: ''
  POOL_NAME: '' # Pool name for the agent
  resourcePipelineName: '' # Name of the pipeline that builds the image tag artifact

jobs:
- job: ${{ parameters.jobName }}
  displayName: ${{ parameters.displayName }}
  pool:
      ${{ if eq(parameters.POOL_NAME, 'Azure Pipelines') }}:
        vmImage: 'ubuntu-latest'
      ${{ else }}:
        name: ${{ parameters.POOL_NAME }}

  steps:
    - checkout: self
      displayName: 'Checkout Repository'

    - download: ${{ parameters.resourcePipelineName }}
      artifact: imageTag

    - task: AzureCLI@2
      displayName: 'Azure CLI Login'
      inputs:
        azureSubscription: ${{ parameters.azureServiceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az --version

    - task: AzureCLI@2
      displayName: 'Update Image Tag'
      inputs:
        azureSubscription: ${{ parameters.azureServiceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          # Read the image tag and set it as a pipeline variable
          IMAGE_TAG=$(cat "$(Pipeline.Workspace)/${{ parameters.resourcePipelineName }}/imageTag/imageTag.txt")
          echo "Image tag is: $IMAGE_TAG"
          
          # Set the variable for use in subsequent steps
          echo "##vso[task.setvariable variable=IMAGE_TAG]$IMAGE_TAG"

          echo "Adding ${{ parameters.environment }} tag to the image ${{ parameters.acrName }}.azurecr.io/${{ parameters.appName }}:$IMAGE_TAG"
          az acr login --name ${{ parameters.acrName }}
          az acr import \
            --name ${{ parameters.acrName }} \
            --source ${{ parameters.acrName }}.azurecr.io/${{ parameters.appName }}:$IMAGE_TAG \
            --image ${{ parameters.appName }}:${{ parameters.environment }} \
            --force

          echo "Tag ${{ parameters.environment }} added to  ${{ parameters.acrName }}.azurecr.io/${{ parameters.appName }}:$IMAGE_TAG"

    - task: AzureCLI@2
      displayName: 'Update Azure Container App'
      inputs:
        azureSubscription: ${{ parameters.azureServiceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e
          # Build the app full name dynamically
          appFullName="${{ parameters.azureLocation }}-${{ parameters.environment }}-${{ parameters.appName }}-ca"
          
          # Use the IMAGE_TAG variable set in the previous step
          echo "Using image tag: $(IMAGE_TAG)"
          
          # Create revision suffix using the same value as IMAGE_TAG but with dashes
          REVISION_SUFFIX=$(echo "$(IMAGE_TAG)" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/--*/-/g' | sed 's/-$//' | sed 's/^-//')
          
          echo "Forcing new revision for $appFullName with image ${{ parameters.acrName }}.azurecr.io/${{ parameters.appName }}:${{ parameters.environment }}"
          echo "Using revision suffix: $REVISION_SUFFIX (based on image tag: $(IMAGE_TAG))"
          
          # Create a new revision by updating the container app with semantic version as suffix
          az containerapp update \
            --name $appFullName \
            --resource-group ${{ parameters.resourceGroupName }} \
            --revision-suffix $REVISION_SUFFIX \
            --image ${{ parameters.acrName }}.azurecr.io/${{ parameters.appName }}:$(IMAGE_TAG)

          echo "$appFullName updated with image ${{ parameters.acrName }}.azurecr.io/${{ parameters.appName }}:$(IMAGE_TAG)"

          
