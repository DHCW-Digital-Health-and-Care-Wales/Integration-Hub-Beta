# PR Validation Pipeline
# Runs code quality checks and unit tests for all apps
trigger: none

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - hl7_server/*
      - hl7_transformer/*
      - hl7_sender/*
      - shared_libs/*
      - pipeline-ado/*

parameters:
  - name: POOL_SELECTION
    displayName: 'Select Agent Pool'
    type: string
    default: 'Azure Pipelines'
    values:
      - 'Azure Pipelines'
      - 'integration-hub-azure-build'
      - 'integration-hub-azure-build-dev'

variables:
  pythonVersion: '3.13'

stages:
  - stage: PRValidation
    displayName: 'PR Code Quality & Unit Tests'
    jobs:
      - job: CodeQualityAndTests
        displayName: 'Code Quality Checks & Unit Tests'
        pool:
          ${{ if eq(parameters.POOL_SELECTION, 'Azure Pipelines') }}:
            vmImage: 'ubuntu-latest'
          ${{ else }}:
            name: ${{ parameters.POOL_SELECTION }}
        
        steps:
          - checkout: self
            displayName: 'Checkout Repository'
            fetchDepth: 1

          - task: UsePythonVersion@0
            displayName: 'Use Python $(pythonVersion)'
            inputs:
              versionSpec: '$(pythonVersion)'

          - script: |
              echo "##[group]Install pipx and tools"
              python -m pip install --upgrade pip
              python -m pip install pipx
              pipx install ruff
              pipx install bandit
              pipx install mypy
              echo "##[endgroup]"
            displayName: 'Install Code Quality Tools'

          - script: |
              echo "##[group]Install App Dependencies"
              # Install shared library first
              pip install -e shared_libs/message_bus_lib/
              
              # Install each app's dependencies
              pip install -r hl7_server/requirements.txt
              pip install -r hl7_transformer/requirements.txt
              pip install -r hl7_sender/requirements.txt
              
              # Install additional common dependencies that might be missing
              pip install azure-servicebus==7.14.2
              pip install azure-identity==1.21.0
              pip install hl7apy==1.3.5
              pip install hl7==0.4.5
              
              echo "##[section]Installed packages:"
              pip list
              echo "##[endgroup]"
            displayName: 'Install Dependencies'

          # Code Quality Checks
          - script: |
              echo "##[group]Ruff Check - HL7 Server"
              cd hl7_server
              pipx run ruff check --output-format=github .
              if [ $? -ne 0 ]; then
                echo "##[error]Ruff check failed for HL7 Server"
                exit 1
              fi
              echo "##[endgroup]"
            displayName: 'Ruff Check - HL7 Server'

          - script: |
              echo "##[group]Ruff Check - HL7 Transformer"
              cd hl7_transformer
              pipx run ruff check --output-format=github .
              if [ $? -ne 0 ]; then
                echo "##[error]Ruff check failed for HL7 Transformer"
                exit 1
              fi
              echo "##[endgroup]"
            displayName: 'Ruff Check - HL7 Transformer'

          - script: |
              echo "##[group]Ruff Check - HL7 Sender"
              cd hl7_sender
              pipx run ruff check --output-format=github .
              if [ $? -ne 0 ]; then
                echo "##[error]Ruff check failed for HL7 Sender"
                exit 1
              fi
              echo "##[endgroup]"
            displayName: 'Ruff Check - HL7 Sender'

          - script: |
              echo "##[group]Ruff Check - Shared Libs"
              cd shared_libs/message_bus_lib
              pipx run ruff check --output-format=github .
              if [ $? -ne 0 ]; then
                echo "##[error]Ruff check failed for Shared Libs"
                exit 1
              fi
              echo "##[endgroup]"
            displayName: 'Ruff Check - Shared Libs'

          # Security Checks
          - script: |
              echo "##[group]Security Scan - HL7 Server"
              cd hl7_server
              # Use find to get actual Python files instead of globbing
              PYTHON_FILES=$(find . -name "*.py" -path "./hl7_server/*" -o -path "./tests/*")
              if [ -n "$PYTHON_FILES" ]; then
                pipx run bandit -r ./hl7_server ./tests -f json -o bandit-report-server.json || true
                pipx run bandit -r ./hl7_server ./tests
                if [ $? -ne 0 ]; then
                  echo "##[warning]Security issues found in HL7 Server - please review"
                fi
              else
                echo "##[warning]No Python files found to scan in HL7 Server"
              fi
              echo "##[endgroup]"
            displayName: 'Security Scan - HL7 Server'

          - script: |
              echo "##[group]Security Scan - HL7 Transformer"
              cd hl7_transformer
              PYTHON_FILES=$(find . -name "*.py" -path "./hl7_transformer/*" -o -path "./tests/*")
              if [ -n "$PYTHON_FILES" ]; then
                pipx run bandit -r ./hl7_transformer ./tests -f json -o bandit-report-transformer.json || true
                pipx run bandit -r ./hl7_transformer ./tests
                if [ $? -ne 0 ]; then
                  echo "##[warning]Security issues found in HL7 Transformer - please review"
                fi
              else
                echo "##[warning]No Python files found to scan in HL7 Transformer"
              fi
              echo "##[endgroup]"
            displayName: 'Security Scan - HL7 Transformer'

          - script: |
              echo "##[group]Security Scan - HL7 Sender"
              cd hl7_sender
              PYTHON_FILES=$(find . -name "*.py" -path "./hl7_sender/*" -o -path "./tests/*")
              if [ -n "$PYTHON_FILES" ]; then
                pipx run bandit -r ./hl7_sender ./tests -f json -o bandit-report-sender.json || true
                pipx run bandit -r ./hl7_sender ./tests
                if [ $? -ne 0 ]; then
                  echo "##[warning]Security issues found in HL7 Sender - please review"
                fi
              else
                echo "##[warning]No Python files found to scan in HL7 Sender"
              fi
              echo "##[endgroup]"
            displayName: 'Security Scan - HL7 Sender'

          # Type Checking
          - script: |
              echo "##[group]Type Check - HL7 Server"
              cd hl7_server
              # Use find to locate Python files and pass them to mypy
              PYTHON_FILES=$(find ./hl7_server ./tests -name "*.py" 2>/dev/null | tr '\n' ' ')
              if [ -n "$PYTHON_FILES" ]; then
                pipx run mypy --ignore-missing-imports $PYTHON_FILES
                if [ $? -ne 0 ]; then
                  echo "##[error]Type checking failed for HL7 Server"
                  exit 1
                fi
              else
                echo "##[warning]No Python files found for type checking in HL7 Server"
              fi
              echo "##[endgroup]"
            displayName: 'Type Check - HL7 Server'

          - script: |
              echo "##[group]Type Check - HL7 Transformer"
              cd hl7_transformer
              PYTHON_FILES=$(find ./hl7_transformer ./tests -name "*.py" 2>/dev/null | tr '\n' ' ')
              if [ -n "$PYTHON_FILES" ]; then
                pipx run mypy --ignore-missing-imports $PYTHON_FILES
                if [ $? -ne 0 ]; then
                  echo "##[error]Type checking failed for HL7 Transformer"
                  exit 1
                fi
              else
                echo "##[warning]No Python files found for type checking in HL7 Transformer"
              fi
              echo "##[endgroup]"
            displayName: 'Type Check - HL7 Transformer'

          - script: |
              echo "##[group]Type Check - HL7 Sender"
              cd hl7_sender
              PYTHON_FILES=$(find ./hl7_sender ./tests -name "*.py" 2>/dev/null | tr '\n' ' ')
              if [ -n "$PYTHON_FILES" ]; then
                pipx run mypy --ignore-missing-imports $PYTHON_FILES
                if [ $? -ne 0 ]; then
                  echo "##[error]Type checking failed for HL7 Sender"
                  exit 1
                fi
              else
                echo "##[warning]No Python files found for type checking in HL7 Sender"
              fi
              echo "##[endgroup]"
            displayName: 'Type Check - HL7 Sender'

          # Unit Tests
          - script: |
              echo "##[group]Unit Tests - HL7 Server"
              cd hl7_server
              python -m unittest discover tests -v
              if [ $? -ne 0 ]; then
                echo "##[error]Unit tests failed for HL7 Server"
                exit 1
              fi
              echo "##[endgroup]"
            displayName: 'Unit Tests - HL7 Server'

          - script: |
              echo "##[group]Unit Tests - HL7 Transformer"
              cd hl7_transformer
              python -m unittest discover tests -v
              if [ $? -ne 0 ]; then
                echo "##[error]Unit tests failed for HL7 Transformer"
                exit 1
              fi
              echo "##[endgroup]"
            displayName: 'Unit Tests - HL7 Transformer'

          - script: |
              echo "##[group]Unit Tests - HL7 Sender"
              cd hl7_sender
              python -m unittest discover tests -v
              if [ $? -ne 0 ]; then
                echo "##[error]Unit tests failed for HL7 Sender"
                exit 1
              fi
              echo "##[endgroup]"
            displayName: 'Unit Tests - HL7 Sender'

          - script: |
              echo "##[group]Unit Tests - Shared Libs"
              cd shared_libs/message_bus_lib
              python -m unittest discover tests -v
              if [ $? -ne 0 ]; then
                echo "##[error]Unit tests failed for Shared Libs"
                exit 1
              fi
              echo "##[endgroup]"
            displayName: 'Unit Tests - Shared Libs'

          # Summary
          - script: |
              echo "##[section]PR Validation Summary"
              echo "✅ Code quality checks completed"
              echo "✅ Security scans completed"
              echo "✅ Type checking completed"
              echo "✅ Unit tests completed"
              echo ""
              echo "All checks passed! PR is ready for review."
            displayName: 'PR Validation Summary'
